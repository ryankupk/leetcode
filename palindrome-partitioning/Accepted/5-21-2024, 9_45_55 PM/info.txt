{"id":1264527176,"question_id":131,"lang":"python3","lang_name":"Python3","time":"2Â weeks, 1Â day","timestamp":1716349555,"status":10,"status_display":"Accepted","runtime":"451 ms","url":"/submissions/detail/1264527176/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"35.3 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \n        def is_palindrome(start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n\n        def backtrack(start, curr_partition):\n            if start == len(s):\n                result.append(curr_partition[:])\n                return\n\n            for end in range(start, len(s)):\n                if is_palindrome(start, end):\n                    curr_partition.append(s[start:end+1])\n                    backtrack(end + 1, curr_partition)\n                    curr_partition.pop()\n\n        result = []\n        backtrack(0, [])\n        return result\n","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}