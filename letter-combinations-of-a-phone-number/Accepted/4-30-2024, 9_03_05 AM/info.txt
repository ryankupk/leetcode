{"id":1245787839,"question_id":17,"lang":"python3","lang_name":"Python3","time":"1 month, 1 week","timestamp":1714489385,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1245787839/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"16.3 MB","code":"from itertools import permutations\nfrom functools import reduce\nclass Solution:\n    letters = {\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi',\n        '5': 'jkl',\n        '6': 'mno',\n        '7': 'pqrs',\n        '8': 'tuv',\n        '9': 'wxyz'\n    }\n    def letterCombinations(self, digits: str) -> List[str]:\n        if len(digits) == 0: return []\n        if len(digits) == 1: return [letter for letter in self.letters[digits]]\n\n        combinations = []\n        def backtrack(start, path):\n            if len(path) == len(digits):\n                combinations.append(''.join(path))\n            else:\n                for letter in self.letters[digits[start]]:\n                    path.append(letter)\n                    backtrack(start + 1, path)\n                    path.pop()\n\n        backtrack(0, [])\n        return combinations\n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}