{"id":1254889735,"question_id":264,"lang":"python3","lang_name":"Python3","time":"3 weeks, 5 days","timestamp":1715404396,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/1254889735/","is_pending":"Not Pending","title":"Ugly Number II","memory":"16.7 MB","code":"class Solution:\n    def prime_factors(self, n):\n        factors = []\n        divisor = 2\n        while divisor * divisor <= n:\n            if n % divisor == 0:\n                factors.append(divisor)\n                n //= divisor\n            else:\n                divisor += 1\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def isUgly(self, n: int, uglies: List[int]) -> bool:\n        if n == 1: return True\n        if n <= 0: return False\n\n        for ugly in uglies:\n            if n == 2 * ugly or n == 3 * ugly or n == 5 * ugly:\n                return True\n\n        for factor in self.prime_factors(n):\n            if factor not in [2, 3, 5]:\n                return False\n        return True\n\n    def generateUglies(self):\n        n = 1690\n        uglies = [1]\n        for i in range(1, n):\n            if self.isUgly(i, uglies):\n                for factor in [2, 3, 5]:\n                    uglies.append(i * factor)\n        \n        return sorted(list(set(uglies)))\n\n    def nthUglyNumber(self, n: int) -> int:\n        if n == 0: return 0\n        if n == 1: return 1\n\n        uglies = [0] * (n)\n        i2, i3, i5 = 0, 0, 0\n        next_2 = 2\n        next_3 = 3\n        next_5 = 5\n\n        for i in range(1, n):\n            uglies[i] = min(next_2, next_3, next_5)\n\n            if uglies[i] == next_2:\n                i2 += 1\n                next_2 = uglies[i2] * 2\n            if uglies[i] == next_3:\n                i3 += 1\n                next_3 = uglies[i3] * 3\n            if uglies[i] == next_5:\n                i5 += 1\n                next_5 = uglies[i5] * 5\n        return uglies[-1]\n\n        # print(self.generateUglies())\n        return self.generateUglies()[n-1]\n        uglies = []\n        current = 1\n        while len(uglies) < n:\n            if self.isUgly(current, uglies):\n                print(f\"{current} is ugly\")\n                uglies.append(current)\n            current += 1\n        \n        return uglies[-1]","compare_resulttitle_slug":"ugly-number-ii","has_notes":false,"flag_type":1}