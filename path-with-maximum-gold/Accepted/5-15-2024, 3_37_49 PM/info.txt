{"id":1259089328,"question_id":1331,"lang":"python3","lang_name":"Python3","time":"3Â weeks","timestamp":1715809069,"status":10,"status_display":"Accepted","runtime":"3784 ms","url":"/submissions/detail/1259089328/","is_pending":"Not Pending","title":"Path with Maximum Gold","memory":"16.6 MB","code":"class Solution:\n    def path_value(self, grid, row, col, visited):\n        if ( # bounds check, skip no-value cells\n           row < 0 \n        or row >= len(grid) \n        or col < 0 \n        or col >= len(grid[0])\n        or (row, col) in visited\n        or grid[row][col] == 0):\n            return 0\n        visited.add((row, col))\n        value = grid[row][col]\n        # up\n        value = max(value, grid[row][col] + self.path_value(grid, row-1, col, visited))\n        # right\n        value = max(value, grid[row][col] + self.path_value(grid, row, col+1, visited))\n        # down\n        value = max(value, grid[row][col] + self.path_value(grid, row+1, col, visited))\n        # left\n        value = max(value, grid[row][col] + self.path_value(grid, row, col-1, visited))\n\n        visited.remove((row, col))\n\n        return value\n\n    def getMaximumGold(self, grid: List[List[int]]) -> int:\n        max_gold: int = 0\n        for r, row in enumerate(grid):\n            for c, _ in enumerate(row):\n                if grid[r][c] != 0:\n                    max_gold = max(max_gold, self.path_value(grid, r, c, set()))\n\n        return max_gold","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-gold","has_notes":false,"flag_type":1}