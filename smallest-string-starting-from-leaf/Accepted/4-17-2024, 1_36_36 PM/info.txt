{"id":1235180375,"question_id":1030,"lang":"ruby","lang_name":"Ruby","time":"1Â month, 2Â weeks","timestamp":1713382596,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/1235180375/","is_pending":"Not Pending","title":"Smallest String Starting From Leaf","memory":"212.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {String}\n\ndef convert_to_letter(num)\n  # Check if the number is within the valid range for lowercase letters\n  if num >= 0 && num <= 25\n    # Add the ASCII code for 'a' to the number to get the corresponding letter\n    (num + 97).chr\n  else\n    # Return an empty string or handle the case where the number is out of range\n    raise Exception\n  end\nend\n\ndef traverse(node, substr, strs) \n    if node.left.nil? and node.right.nil?\n        # p convert_to_letter(node.val) + substr.reverse\n        strs << (convert_to_letter(node.val) + substr)\n    elsif node.left.nil? and !node.right.nil?\n        traverse(node.right, convert_to_letter(node.val) + substr, strs)\n    elsif !node.left.nil? and node.right.nil?\n        traverse(node.left, convert_to_letter(node.val) + substr, strs)\n    else\n        traverse(node.left , convert_to_letter(node.val) + substr, strs)\n        traverse(node.right, convert_to_letter(node.val) + substr, strs)\n    end\nend\n\ndef smallest_from_leaf(root)\n    smallest = 'z' * 8500\n    strs = []\n    traverse(root, '', strs)\n    # p \"traversed:\"\n    # p strs\n    strs.min\nend","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-string-starting-from-leaf","has_notes":false,"flag_type":1}