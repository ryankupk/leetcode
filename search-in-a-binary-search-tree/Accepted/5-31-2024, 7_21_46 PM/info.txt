{"id":1273732379,"question_id":783,"lang":"python3","lang_name":"Python3","time":"5 days, 18 hours","timestamp":1717204906,"status":10,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/1273732379/","is_pending":"Not Pending","title":"Search in a Binary Search Tree","memory":"18.3 MB","code":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\r\n\r\n        if root.val == val:\r\n            return root\r\n        def traverse(root):\r\n            if root is None:\r\n                return None\r\n            \r\n            left = traverse(root.left)\r\n            right = traverse(root.right)\r\n            if left is not None and left.val == val:\r\n                return left\r\n            if right is not None and right.val == val:\r\n                return right\r\n            return root\r\n            \r\n        sub = traverse(root)\r\n        if sub == root:\r\n            return None\r\n        return sub\r\n        ","compare_result":"111111111111111111111111111111111111","title_slug":"search-in-a-binary-search-tree","has_notes":false,"flag_type":1}